@using System.IO;
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Microsoft.Extensions.Configuration;
@using PetIdentificationUI.Models;
@inject IConfiguration config;

<div class="container">
    <div class="row">
        @if(!isFileProcessed)
            {
                <h2 style="font-family: 'Lobster', cursive;
                font-size: 30px;
                opacity: 1.0;">Let us find a nearest shelter</h2>
                <div class="fileUploadbox">
                <BlazorInputFile.InputFile accept="image/png,image/gif,image/jpeg" OnChange="UploadFileAsync" />
                @DefaultMessage
                </div>
                @if (fileName != null && (doesFileSizeExceedLimit || isUnacceptableFileType))
                {
                    
                    <p class="fileupload-error">@status</p>
                    
                }

            }
            else
            {
                @status
                <SignalRComponent StrayAdoptionAppState=@appState></SignalRComponent>
                
            }
        @* <div class="col-1">
            
            @if(!isFileProcessed)
            {
                <h2 style="font-family: 'Lobster', cursive;
                font-size: 30px;
                opacity: 1.0;">Let us find a nearest shelter</h2>
                <div class="fileUploadbox">
                <InputFile accept="image/png,image/gif,image/jpeg" OnChange="UploadFileAsync" />
                @DefaultMessage
                </div>
                @if (fileName != null && (doesFileSizeExceedLimit || isUnacceptableFileType))
                {
                    
                    <p class="fileupload-error">@status</p>
                    
                }

            }
            else
            {
                @status
                <SignalRComponent StrayAdoptionAppState=@appState></SignalRComponent>
                
            }
            
            
        </div> *@
    </div>
</div>


@code{

    [Parameter]
    public string UserId{get; set;}

    const string DefaultMessage = @"Drop a image of the stray pet here,
    or click to choose a file";
    const int MaxFileSize = 5 * 1024 * 1024;
    private bool doesFileSizeExceedLimit = false;
    private bool isUnacceptableFileType = false;
    private string status = DefaultMessage;
    private string fileName;
    private string fileContentType;
    private bool isFileProcessed = false;

    private string blobUrl = string.Empty;

    private StrayAdoptionAppState appState;

    
    private async Task UploadFileAsync(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        

        if (file == null)
        {
            status = "Please upload an image";
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = "We only support upload of images lesser than 5 MB";
        }
        else
        {
            status = $"Uploading {file.Name}...";
            fileContentType = file.Type;
            fileName = file.Name;

            await UploadToBlobStorageAsync(file.Data);

            status = "Uploaded Successfully!!";
            isFileProcessed = true;
        }

    }


    private async Task UploadToBlobStorageAsync(Stream s)
    {
 
        var client = new BlobContainerClient(
            config["blobcontainerConnection"].ToString(), "uploads"
        )
        ;
        var blob = client.GetBlobClient(GetBlobName());
        
        var blobHttpHeaders = new BlobHttpHeaders();
        blobHttpHeaders.ContentType = fileContentType;

        await client.CreateIfNotExistsAsync();

        await blob.UploadAsync(s, blobHttpHeaders);

        blobUrl = blob.Uri.AbsoluteUri;

        appState = new StrayAdoptionAppState()
        {
            BlobUrl = new Uri(blobUrl),
            SignalRUserId = UserId
        };
        
        
    }

    private string GetBlobName()
    {
        var extension = string.Empty;

        if(fileContentType == "image/jpeg")
        {
            extension = "jpg";
        }
        else
        {
            extension = "png";
        }
        return string.Format("{0}.{1}", Guid.NewGuid().ToString(), extension);
    }

}
