@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient;
@using System.Dynamic;
@using PetIdentificationUI.Models;

@implements IAsyncDisposable

<div>
   
   <p>
       UserId is : @StrayAdoptionAppState.SignalRUserId 
       <br>
       Now Showing Results

       <br>
   </p>

    <ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
</div>

@code{
    [Parameter]
    public StrayAdoptionAppState StrayAdoptionAppState {get; set;}

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    
    private string connectionUrl;

    private string accessToken;

    protected override async Task OnInitializedAsync()
    {
        
        await GetConnectionInfoAsync();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(
            connectionUrl,
            options => {
                options.AccessTokenProvider = () => Task.FromResult(accessToken);
            }
        )
        .Build();

        hubConnection.On<string>("sendPetAdoptionCentres", (message) =>
        {
            messages.Add(message);
            StateHasChanged();
        }
        );
        await hubConnection.StartAsync();
        await CallDurableHttpFunction();

        
    }
    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    
    private async Task GetConnectionInfoAsync()
    {
        Console.WriteLine("Calling the url");

        Console.WriteLine("Signal R User Id is {0}", StrayAdoptionAppState.SignalRUserId);
        HttpClient.DefaultRequestHeaders.Remove("x-blazor-app-session-id");
        HttpClient.DefaultRequestHeaders.Add("x-blazor-app-session-id", StrayAdoptionAppState.SignalRUserId);

        var result = await HttpClient.PostAsync(
            new Uri(
                "http://localhost:7071/api/negotiate"
            ),
            new StringContent(string.Empty)
        );

         var responseJson = await result.Content.ReadAsStringAsync(); 
         dynamic data = JsonConvert.DeserializeObject(responseJson);

        
        accessToken = data?.accessToken;
        connectionUrl = data?.url;
       
        
    }

    private async Task CallDurableHttpFunction()
    {
        Console.WriteLine("Calling durable function");

        var jsonRequest = JsonConvert.SerializeObject(StrayAdoptionAppState);
        var result = await HttpClient.PostAsJsonAsync<StrayAdoptionAppState>(
                new Uri(
                "http://localhost:7071/api/StrayPetManagementDurableHttpClient"
            ),
            StrayAdoptionAppState
            );

    }

}